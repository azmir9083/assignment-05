def fully_assoc_cache_map(cache, main_memory, memory_address):
    """
    Map a block from main memory to a fully associative cache.
    """
    # Convert the address to an integer for bitwise operations
    address_int = int(memory_address, 2)

    # Extract tag bits and word bits
    tag_bits = address_int >> 3  # Assuming 8 bits per word
    word_bits = address_int & 0b111  # Using bitwise AND to extract the last 3 bits

    # Check if the block is already in the cache
    for cache_line_label, cache_line_content in cache.items():
        if cache_line_content[0] == tag_bits and cache_line_content[2] == 1:  # If tag matches and valid bit is 1
            return cache  # Block is already in cache

    # If block not in cache, find an empty cache line
    for cache_line_label, cache_line_content in cache.items():
        if cache_line_content[2] == 0:  # If valid bit is 0, cache line is empty
            # Map the block to this cache line
            cache[cache_line_label] = [tag_bits, main_memory[memory_address][word_bits], 1]  # Set valid bit to 1
            return cache

    # If no empty cache line found, implement a replacement strategy
    # For simplicity, let's replace the first cache line (could implement LRU, FIFO, etc.)
    first_cache_line_label = next(iter(cache))
    cache[first_cache_line_label] = [tag_bits, main_memory[memory_address][word_bits], 1]

    return cache

# Initialize memory and store data
main_memory = {
    "00000110101000": [0, 1, 2, 3, 4, 5, 6, 7],
    "00001110101000": [10, 11, 12, 13, 14, 15, 16, 17],
    "00011110101000": [20, 21, 22, 23, 24, 25, 26, 27],
    "00111110101000": [30, 31, 32, 33, 34, 35, 36, 37],
    "01111110101000": [40, 41, 42, 43, 44, 45, 46, 47]
}

# Initialize cache
initial_cache = {
    "block0": ["00000000000", [0, 0, 0, 0, 0, 0, 0, 0], 0],
    "block1": ["00000000000", [0, 0, 0, 0, 0, 0, 0, 0], 0],
    "block2": ["00000000000", [0, 0, 0, 0, 0, 0, 0, 0], 0],
    "block3": ["00000000000", [0, 0, 0, 0, 0, 0, 0, 0], 0]
}

# Map blocks from memory to cache
addresses = ["00000110101000", "00001110101000", "00011110101000", "00111110101000", "01111110101000"]
for addr in addresses:
    initial_cache = fully_assoc_cache_map(initial_cache, main_memory, addr)

print(initial_cache)



