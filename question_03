def store_data(memory, data):
    """
    Store data in memory.
    """
    memory.update(data)
    return memory

def map_to_fully_associative_cache(cache, main_memory, address):
    """
    Map a block from main memory to a fully associative cache.
    """
    # Split the address into tag and word segments
    tag, word = address[:11], address[11:]

    # Check if the block is already in the cache
    for block in cache.values():
        if block[0] == tag and block[2] == 1:  # If tag matches and valid bit is 1
            return cache  # Block is already in cache

    # If block is not in the cache, find an empty cache line
    for block_label, block_content in cache.items():
        if block_content[2] == 0:  # If valid bit is 0, cache line is empty
            # Map the block to this cache line
            cache[block_label] = [tag, main_memory[address], 1]  # Set valid bit to 1
            return cache

    # If no empty cache line is found, implement a replacement strategy
    # For simplicity, let's replace the first block (could implement LRU, FIFO, etc.)
    first_block_label = list(cache.keys())[0]
    cache[first_block_label] = [tag, main_memory[address], 1]

    return cache

# Initialize main memory and store data
initial_memory = {}
main_memory = store_data(initial_memory, {"00000110101000": [0, 1, 2, 3, 4, 5, 6, 7]})
main_memory = store_data(main_memory, {"00001110101000": [10, 11, 12, 13, 14, 15, 16, 17]})
main_memory = store_data(main_memory, {"00011110101000": [20, 21, 22, 23, 24, 25, 26, 27]})
main_memory = store_data(main_memory, {"00111110101000": [30, 31, 32, 33, 34, 35, 36, 37]})
main_memory = store_data(main_memory, {"01111110101000": [40, 41, 42, 43, 44, 45, 46, 47]})

# Initialize cache
cache_memory = {
    "block0": ["00000000000", [0, 0, 0, 0, 0, 0, 0, 0], 0],
    "block1": ["00000000000", [0, 0, 0, 0, 0, 0, 0, 0], 0],
    "block2": ["00000000000", [0, 0, 0, 0, 0, 0, 0, 0], 0],
    "block3": ["00000000000", [0, 0, 0, 0, 0, 0, 0, 0], 0]
}

# Map blocks from main memory to cache
addresses_to_map = ["00000110101000", "00001110101000", "00011110101000", "00111110101000", "01111110101000"]
for addr in addresses_to_map:
    cache_memory = map_to_fully_associative_cache(cache_memory, main_memory, addr)


def print_cache_contents(cache):
    """
    Print the contents of each block in the cache.
    """
    for block_label, block_content in cache.items():
        print(f"Block {block_label}:")
        print(f"  Tag: {block_content[0]}")
        print(f"  Data: {block_content[1]}")
        print(f"  Valid Bit: {block_content[2]}")
        print("-------------------")

# ... (previous code remains unchanged)

# Print the contents of each block in the cache after mapping
print_cache_contents(cache_memory)

   
